# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

# Supported base images: Ubuntu 22.04, 20.04
ARG DISTRIB_RELEASE=22.04
ARG GSTREAMER_BASE_IMAGE=ghcr.io/selkies-project/selkies-gstreamer/gstreamer
ARG GSTREAMER_BASE_IMAGE_RELEASE=main
ARG PY_BUILD_IMAGE=ghcr.io/selkies-project/selkies-gstreamer/py-build:main
ARG WEB_IMAGE=ghcr.io/selkies-project/selkies-gstreamer/gst-web:main
ARG JS_BASE_IMAGE=ghcr.io/selkies-project/selkies-gstreamer/js-interposer
ARG JS_BASE_IMAGE_RELEASE=main
FROM ${GSTREAMER_BASE_IMAGE}:${GSTREAMER_BASE_IMAGE_RELEASE}-ubuntu${DISTRIB_RELEASE} as selkies-gstreamer
FROM ${PY_BUILD_IMAGE} as selkies-build
FROM ${WEB_IMAGE} as selkies-web
FROM ${JS_BASE_IMAGE}:${JS_BASE_IMAGE_RELEASE}-ubuntu${DISTRIB_RELEASE} as selkies-js-interposer
FROM ubuntu:${DISTRIB_RELEASE}
ARG DISTRIB_RELEASE

LABEL maintainer "https://github.com/danisla,https://github.com/ehfd"

ARG DEBIAN_FRONTEND=noninteractive

# Install Selkies-GStreamer system dependencies
RUN apt-get update && apt-get install --no-install-recommends -y \
        # System dependencies
        apt-utils \
        build-essential \
        curl \
        gdebi-core \
        gnupg \
        software-properties-common \
        sudo \
        tzdata \
        jq \
        # GStreamer dependencies
        python3-pip \
        python3-dev \
        python3-gi \
        python3-setuptools \
        python3-wheel \
        udev \
        wmctrl \
        libaa1 \
        bzip2 \
        libgcrypt20 \
        libegl1 \
        libgl1 \
        libgles1 \
        libglvnd0 \
        libglx0 \
        libcairo-gobject2 \
        libpangocairo-1.0-0 \
        libgdk-pixbuf2.0-0 \
        libsoup2.4-1 \
        libsoup-gnome2.4-1 \
        libgirepository-1.0-1 \
        glib-networking \
        libglib2.0-0 \
        libjson-glib-1.0-0 \
        libgudev-1.0-0 \
        libx11-xcb1 \
        libxcb-dri3-0 \
        libxkbcommon0 \
        libxdamage1 \
        libxfixes3 \
        libxtst6 \
        libxext6 \
        xclip \
        x11-utils \
        xdotool \
        x11-xserver-utils \
        xserver-xorg-core \
        wayland-protocols \
        libwayland-dev \
        libwayland-egl1 \
        libdrm2 \
        alsa-utils \
        libasound2 \
        jackd2 \
        libjack-jackd2-0 \
        libogg0 \
        libopus0 \
        pulseaudio \
        libpulse0 \
        libvorbis-dev \
        libvpx-dev \
        libwebp-dev \
        libwebrtc-audio-processing1 \
        x264 \
        x265 \
        # AMD/Intel graphics driver dependencies
        va-driver-all \
        i965-va-driver-shaders \
        intel-media-va-driver-non-free \
        libva2 \
        vainfo \
        nvtop && \
        # NVIDIA OpenCL ICD
        mkdir -pm755 /etc/OpenCL/vendors && echo "libnvidia-opencl.so.1" > /etc/OpenCL/vendors/nvidia.icd && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /opt

# Install test dependencies
RUN mkdir -pm755 /etc/apt/preferences.d && echo "Package: firefox*\n\
Pin: version 1:1snap*\n\
Pin-Priority: -1" > /etc/apt/preferences.d/firefox-nosnap && \
    mkdir -pm755 /etc/apt/trusted.gpg.d && curl -fsSL "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x0AB215679C571D1C8325275B9BDB3D89CE49EC21" | gpg --dearmor -o /etc/apt/trusted.gpg.d/mozillateam-ubuntu-ppa.gpg && \
    mkdir -pm755 /etc/apt/sources.list.d && echo "deb https://ppa.launchpadcontent.net/mozillateam/ppa/ubuntu $(grep UBUNTU_CODENAME= /etc/os-release | cut -d= -f2 | tr -d '\"') main" > "/etc/apt/sources.list.d/mozillateam-ubuntu-ppa-$(grep UBUNTU_CODENAME= /etc/os-release | cut -d= -f2 | tr -d '\"').list" && \
    apt-get update && apt-get install --no-install-recommends -y \
        git \
        vim \
        wget \
        zip \
        unzip \
        ssl-cert \
        xvfb \
        xfce4 \
        xfce4-terminal \
        mesa-utils \
        adwaita-icon-theme-full \
        dbus-x11 \
        x11-apps \
        firefox \
        jstest-gtk \
        coturn && \
    if [ "$(grep VERSION_ID= /etc/os-release | cut -d= -f2 | tr -d '\"')" \> "20.04" ]; then apt-get install --no-install-recommends -y xcvt; else apt-get install --no-install-recommends -y mesa-utils-extra; fi && \
    # Prevent dialogs at Xfce4 desktop environment start
    cp -rf /etc/xdg/xfce4/panel/default.xml /etc/xdg/xfce4/xfconf/xfce-perchannel-xml/xfce4-panel.xml && \
    rm -rf /var/lib/apt/lists/*

# Add Tini init script - take care of runaway processes
ENV TINI_VERSION v0.7.0
ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini
RUN chmod +x /tini

# Install GStreamer distribution
COPY --from=selkies-gstreamer /opt/gstreamer ./gstreamer

# Make all NVIDIA GPUs visible by default
ENV NVIDIA_VISIBLE_DEVICES all
# All NVIDIA driver capabilities should be used
ENV NVIDIA_DRIVER_CAPABILITIES all
# Disable VSYNC for NVIDIA GPUs
ENV __GL_SYNC_TO_VBLANK 0

# Install web application
COPY --from=selkies-web /usr/share/nginx/html ./gst-web

# Install Joystick Interposer
COPY --from=selkies-js-interposer /opt/*.deb /opt/selkies-js-interposer.deb
RUN apt-get update && apt-get install --no-install-recommends -y /opt/selkies-js-interposer.deb && rm -f /opt/selkies-js-interposer.deb && \
    rm -rf /var/lib/apt/lists/*

# Install Selkies-GStreamer Python application
ARG PYPI_PACKAGE=selkies_gstreamer
ARG PACKAGE_VERSION=0.0.0.dev0
COPY --from=selkies-build /opt/pypi/dist/${PYPI_PACKAGE}-${PACKAGE_VERSION}-py3-none-any.whl .
RUN pip3 install --no-cache-dir --force-reinstall /opt/${PYPI_PACKAGE}-${PACKAGE_VERSION}-py3-none-any.whl

# Setup global bashrc to configure X11 environment
ENV DISPLAY ":0"
RUN echo "export DISPLAY=${DISPLAY:-\:0}" >> /etc/bash.bashrc

# Write turnserver script
RUN echo "#!/bin/bash\n\
exec turnserver\n\
    --verbose\n\
    --listening-ip=0.0.0.0\n\
    --listening-port=\${SELKIES_TURN_PORT:-3478}\n\
    --realm=\${TURN_REALM:-example.com}\n\
    --min-port=\${TURN_MIN_PORT:-49152}\n\
    --max-port=\${TURN_MAX_PORT:-65535}\n\
    --lt-cred-mech\n\
    --user selkies:selkies\n\
    --no-cli\n\
    --allow-loopback-peers\n\
    --db /tmp/coturn-turndb\n\
    \${EXTRA_ARGS} \$@\n\
" > /start-turnserver.sh && chmod +x /start-turnserver.sh

# Write startup script
RUN echo "#!/bin/bash\n\
sudo /start-turnserver.sh &\n\
export DISPLAY=\"\${DISPLAY:-\:0}\"\n\
export LD_PRELOAD='/usr/\$LIB/selkies-js-interposer/joystick_interposer.so'\n\
export SDL_JOYSTICK_DEVICE=/dev/input/js0\n\
sudo mkdir -pm755 /dev/input\n\
sudo touch /dev/input/{js0,js1,js2,js3}\n\
Xvfb -screen :0 8192x4096x24 +extension "COMPOSITE" +extension "DAMAGE" +extension "GLX" +extension "RANDR" +extension "RENDER" +extension "MIT-SHM" +extension "XFIXES" +extension "XTEST" +iglx +render -nolisten "tcp" -noreset -shmem 2>&1 >/tmp/Xvfb.log &\n\
until [ -S /tmp/.X11-unix/X0 ]; do sleep 1; done && echo 'X Server is ready'\n\
export PULSE_SERVER=unix:/run/pulse/native\n\
sudo /usr/bin/pulseaudio -k >/dev/null 2>&1\n\
sudo /usr/bin/pulseaudio --daemonize --system --verbose --log-target=file:/tmp/pulseaudio.log --realtime=true --disallow-exit -L 'module-native-protocol-tcp auth-ip-acl=127.0.0.0/8 port=4713 auth-anonymous=1'\n\
[ \"\${START_XFCE4:-true}\" = "true" ] && rm -rf ~/.config/xfce4 && xfce4-session &\n\
export SELKIES_ENCODER=\${SELKIES_ENCODER:-x264enc}\n\
export SELKIES_ENABLE_RESIZE=\${SELKIES_ENABLE_RESIZE:-true}\n\
export SELKIES_TURN_HOST=\${SELKIES_TURN_HOST:-\$(curl -fsSL checkip.amazonaws.com)}\n\
export SELKIES_TURN_PORT=\${SELKIES_TURN_PORT:-3478}\n\
export SELKIES_TURN_USERNAME=\${SELKIES_TURN_USERNAME:-selkies}\n\
export SELKIES_TURN_PASSWORD=\${SELKIES_TURN_PASSWORD:-selkies}\n\
export SELKIES_TURN_PROTOCOL=\${SELKIES_TURN_PROTOCOL:-tcp}\n\
export GST_DEBUG=\"*:2\"\n\
export GSTREAMER_PATH=/opt/gstreamer\n\
. /opt/gstreamer/gst-env\n\
selkies-gstreamer-resize 1920x1080\n\
selkies-gstreamer\n\
" > /entrypoint.sh && chmod +x /entrypoint.sh

# Configure bashrc to show /etc/motd and /etc/issue
RUN echo '[ ! -z "$TERM" -a -r /etc/motd ] && cat /etc/issue && cat /etc/motd' \
    >> /etc/bash.bashrc \
    ; echo "\
===================================================================\n\
= Selkies GStreamer test Docker container                         =\n\
===================================================================\n\
\n\
To test the package:\n\
\n\
/entrypoint.sh\n\
\n\
Or start each process separately:\n\
\n\
$(tail -n +2 /entrypoint.sh)\n\
\n\
To test the signaling server standalone:\n\
\n\
python3 signalling_web.py --port 8080 --web_root=/opt/gst-web &\n\
\n\
"\
    > /etc/motd

# Add login user
ARG TZ=UTC
ARG PASSWD=mypasswd
RUN groupadd -g 1000 user && \
    useradd -ms /bin/bash user -u 1000 -g 1000 && \
    usermod -a -G adm,audio,cdrom,dialout,dip,fax,floppy,input,lp,plugdev,pulse-access,render,ssl-cert,sudo,tape,tty,video,voice user && \
    echo "user ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers && \
    chown user:user /home/user && \
    echo "user:${PASSWD}" | chpasswd && \
    ln -snf "/usr/share/zoneinfo/$TZ" /etc/localtime && echo "$TZ" > /etc/timezone

USER user
ENV USER=user
WORKDIR /home/user

ENTRYPOINT ["/tini", "--"]
CMD ["/entrypoint.sh"]
