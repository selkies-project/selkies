# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

# Supported base images: ubuntu:22.04, ubuntu:20.04
ARG UBUNTU_RELEASE=22.04
ARG GSTREAMER_BASE_IMAGE=ghcr.io/selkies-project/selkies-gstreamer/gstreamer
ARG GSTREAMER_BASE_IMAGE_RELEASE=main
ARG PY_BUILD_IMAGE=ghcr.io/selkies-project/selkies-gstreamer/py-build:main
ARG WEB_IMAGE=ghcr.io/selkies-project/selkies-gstreamer/gst-web:main
ARG JS_IMAGE=ghcr.io/selkies-project/selkies-gstreamer/js-interposer:main
FROM ${GSTREAMER_BASE_IMAGE}:${GSTREAMER_BASE_IMAGE_RELEASE}-ubuntu${UBUNTU_RELEASE} as selkies-gstreamer
FROM ${PY_BUILD_IMAGE} as selkies-build
FROM ${WEB_IMAGE} as selkies-web
FROM ${JS_IMAGE}-ubuntu${UBUNTU_RELEASE} as selkies-js-interposer
FROM ubuntu:${UBUNTU_RELEASE}
ARG UBUNTU_RELEASE

LABEL maintainer "https://github.com/danisla,https://github.com/ehfd"

# Install Selkies-GStreamer system dependencies
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \
        # System dependencies
        build-essential \
        gnupg \
        software-properties-common \
        sudo \
        tzdata \
        # GStreamer dependencies
        python3-pip \
        python3-dev \
        python3-gi \
        python3-setuptools \
        python3-wheel \
        udev \
        wmctrl \
        jq \
        gdebi-core \
        libgdk-pixbuf2.0-0 \
        libgtk2.0-bin \
        libgl-dev \
        libgles-dev \
        libglvnd-dev \
        libgudev-1.0-0 \
        xclip \
        x11-utils \
        xdotool \
        x11-xserver-utils \
        xserver-xorg-core \
        wayland-protocols \
        libwayland-dev \
        libwayland-egl1 \
        libx11-xcb1 \
        libxkbcommon0 \
        libxdamage1 \
        libsoup2.4-1 \
        libsoup-gnome2.4-1 \
        libsrtp2-1 \
        lame \
        libopus0 \
        libwebrtc-audio-processing1 \
        pulseaudio \
        libpulse0 \
        libcairo-gobject2 \
        libpangocairo-1.0-0 \
        libgirepository-1.0-1 \
        libopenjp2-7 \
        libjpeg-dev \
        libwebp-dev \
        libvpx-dev \
        zlib1g-dev \
        x264 \
        # AMD/Intel graphics driver dependencies
        va-driver-all \
        i965-va-driver-shaders \
        intel-media-va-driver-non-free \
        libmfx-tools \
        libva2 \
        vainfo \
        intel-gpu-tools \
        radeontop && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /opt

# Install test dependencies
RUN mkdir -pm755 /etc/apt/preferences.d && \
    echo "Package: firefox*\n\
Pin: version 1:1snap*\n\
Pin-Priority: -1" > /etc/apt/preferences.d/firefox-nosnap && \
    add-apt-repository -y ppa:mozillateam/ppa && \
    apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \
        git \
        vim \
        curl \
        ssl-cert \
        jq \
        xvfb \
        xfce4 \
        xfce4-terminal \
        adwaita-icon-theme-full \
        dbus-x11 \
        x11-apps \
        firefox \
        jstest-gtk \
        coturn && \
    rm -rf /var/lib/apt/lists/* && \
    update-alternatives --set x-www-browser /usr/bin/firefox

# Install Ubuntu 22.04 specific packages
RUN if [ "${UBUNTU_RELEASE}" = "22.04" ]; then apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y xcvt; fi && \
    rm -rf /var/lib/apt/lists/*

# Add Tini init script - take care of runaway processes
ENV TINI_VERSION v0.7.0
ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini
RUN chmod +x /tini

# Install GStreamer distribution
COPY --from=selkies-gstreamer /opt/gstreamer ./gstreamer

# Install web application
COPY --from=selkies-web /usr/share/nginx/html ./gst-web

# Install Joystick Interposer
COPY --from=selkies-js-interposer /opt/*.deb /opt/selkies-js-interposer.deb
RUN apt-get install -y /opt/selkies-js-interposer.deb

# Update PWA manifest.json with application information and route.
ARG PWA_APP_NAME="Selkies WebRTC"
ARG PWA_APP_SHORT_NAME="selkies"
ARG PWA_START_URL="/index.html"
RUN sed -i \
        -e "s|PWA_APP_NAME|${PWA_APP_NAME}|g" \
        -e "s|PWA_APP_SHORT_NAME|${PWA_APP_SHORT_NAME}|g" \
        -e "s|PWA_START_URL|${PWA_START_URL}|g" \
    /opt/gst-web/manifest.json && \
    sed -i \
        -e "s|PWA_CACHE|${PWA_APP_SHORT_NAME}-webrtc-pwa|g" \
    /opt/gst-web/sw.js

# Install Selkies-GStreamer Python application
ARG PYPI_PACKAGE=selkies_gstreamer
ARG PACKAGE_VERSION=0.0.0.dev0
COPY --from=selkies-build /opt/pypi/dist/${PYPI_PACKAGE}-${PACKAGE_VERSION}-py3-none-any.whl .
RUN pip3 install /opt/${PYPI_PACKAGE}-${PACKAGE_VERSION}-py3-none-any.whl

# Setup global bashrc to configure GStreamer environment
RUN echo 'export DISPLAY=:0' \
        >> /etc/bash.bashrc && \
    echo 'export GST_DEBUG=*:2' \
        >> /etc/bash.bashrc && \
    echo 'export GSTREAMER_PATH=/opt/gstreamer' \
        >> /etc/bash.bashrc && \
    echo 'source /opt/gstreamer/gst-env' \
        >> /etc/bash.bashrc

# Write turnserver script
RUN echo "#!/bin/bash\n\
exec turnserver\n\
    --verbose\n\
    --no-tls\n\
    --listening-ip=0.0.0.0\n\
    --listening-port=\${TURN_PORT:-3478}\n\
    --realm=\${TURN_REALM:-example.com}\n\
    --channel-lifetime=\${TURN_CHANNEL_LIFETIME:--1}\n\
    --min-port=\${TURN_MIN_PORT:-49152}\n\
    --max-port=\${TURN_MAX_PORT:-65535}\n\
    --user selkies:selkies\n\
    --no-cli\n\
    --cli-password selkies\n\
    --allow-loopback-peers\n\
    --db \${HOME}/.config/turndb\n\
    \${EXTRA_ARGS} \$@\n\
" > /start-turnserver.sh && chmod +x /start-turnserver.sh

# Write startup script
RUN echo "#!/bin/bash\n\
export DISPLAY=:0\n\
export GST_DEBUG=*:2\n\
export GSTREAMER_PATH=/opt/gstreamer\n\
source /opt/gstreamer/gst-env\n\
export LD_PRELOAD=/usr/local/lib/selkies-js-interposer/joystick_interposer.so\n\
export SDL_JOYSTICK_DEVICE=/dev/input/js0\n\
sudo mkdir -p /dev/input\n\
sudo touch /dev/input/{js0,js1,js2,js3}\n\
Xvfb -screen :0 8192x4096x24 +extension RANDR +extension GLX +extension MIT-SHM -nolisten tcp -noreset -shmem 2>&1 >/tmp/Xvfb.log &\n\
until [[ -S /tmp/.X11-unix/X0 ]]; do sleep 1; done && echo 'X Server is ready'\n\
export PULSE_SERVER=unix:/run/pulse/native\n\
sudo /usr/bin/pulseaudio -k >/dev/null 2>&1\n\
sudo /usr/bin/pulseaudio --daemonize --system --verbose --log-target=file:/tmp/pulseaudio.log --realtime=true --disallow-exit -L 'module-native-protocol-tcp auth-ip-acl=127.0.0.0/8 port=4713 auth-anonymous=1'\n\
[[ \${START_XFCE4:-true} == 'true' ]] && rm -rf ~/.config/xfce4 && xfce4-session &\n\
/start-turnserver.sh &\n\
export WEBRTC_ENCODER=\${WEBRTC_ENCODER:-x264enc}\n\
export WEBRTC_ENABLE_RESIZE=\${WEBRTC_ENABLE_RESIZE:-true}\n\
export TURN_HOST=\${TURN_HOST:-localhost}\n\
export TURN_PORT=\${TURN_PORT:-3478}\n\
export TURN_USERNAME=\${TURN_USERNAME:-selkies}\n\
export TURN_PASSWORD=\${TURN_PASSWORD:-selkies}\n\
export TURN_PROTOCOL=\${TURN_PROTOCOL:-tcp}\n\
selkies-gstreamer-resize 1280x720\n\
selkies-gstreamer\n\
" > /entrypoint.sh && chmod +x /entrypoint.sh

# Configure bashrc to show /etc/motd and /etc/issue
RUN echo '[ ! -z "$TERM" -a -r /etc/motd ] && cat /etc/issue && cat /etc/motd' \
    >> /etc/bash.bashrc \
    ; echo "\
===================================================================\n\
= Selkies GStreamer test Docker container                         =\n\
===================================================================\n\
\n\
To test the package:\n\
\n\
/entrypoint.sh\n\
\n\
Or start each process separately:\n\
\n\
$(tail -n +2 /entrypoint.sh)\n\
\n\
To test the signaling server standalone:\n\
\n\
python3 signalling_web.py --port 8080 --web_root=/opt/gst-web &\n\
\n\
"\
    > /etc/motd

# Add login user
ARG TZ=UTC
ARG PASSWD=mypasswd
RUN groupadd -g 1000 user && \
    useradd -ms /bin/bash user -u 1000 -g 1000 && \
    usermod -a -G adm,audio,cdrom,dialout,dip,fax,floppy,input,plugdev,pulse-access,ssl-cert,sudo,tape,tty,video,voice user && \
    echo "user ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers && \
    chown -R user:user /home/user && \
    echo "user:${PASSWD}" | chpasswd && \
    ln -snf "/usr/share/zoneinfo/$TZ" /etc/localtime && echo "$TZ" > /etc/timezone

# Prevent dialogs at Xfce4 desktop environment start
RUN cp -rf /etc/xdg/xfce4/panel/default.xml /etc/xdg/xfce4/xfconf/xfce-perchannel-xml/xfce4-panel.xml

USER user
ENV USER=user
WORKDIR /home/user
RUN touch ${HOME}/.sudo_as_admin_successful

ENTRYPOINT ["/tini", "--"]
CMD ["/entrypoint.sh"]
