name: Build & publish an image

description: Build an image from source, then publish it to GHCR

inputs:
  build_args:
    description: "`ARG=value`s to pass to `docker build`"
    required: false
  dockerfile:
    default: "Dockerfile"
    description: Image source file name
    required: false
  github_personal_access_token:
    description: GitHub personal access token (PAT), for authentication
    required: true
  github_username:
    description: GitHub username, for authentication
    required: true
  image_source_directory:
    description: Image source directory path
    required: true
  image_tag_1:
    description: A tag for the image, such as "ghcr.io/user/repo/foo:bar"
    required: true
  image_tag_2:
    description: A tag for the image, such as "ghcr.io/user/repo/foo:bar"
    required: false
  use_cache:
    description: Use cached layers from pre-published image with version 1 (true/false)
    required: false

runs:
  using: composite
  steps:
    - shell: bash
      run: |
        set -x
        echo ${{ inputs.github_personal_access_token }} | docker login ghcr.io -u ${{ inputs.github_username }} --password-stdin
        export BUILD_ARGS=""
        if [[ -n "${{ inputs.build_args }}" ]]; then
          IFS=";" read -ra args <<< "${{ inputs.build_args }}"
          for arg in ${args[@]}; do BUILD_ARGS+="--build-arg $arg "; done
        fi
        if [[ "${{ inputs.use_cache }}" == "true" ]]; then
          docker pull ${{ inputs.image_tag_1 }} || true
          (cd ${{ inputs.image_source_directory }} && docker build $BUILD_ARGS -f ${{ inputs.dockerfile }} --cache-from ${{ inputs.image_tag_1 }} -t ${{ inputs.image_tag_1 }} .)
        else
          (cd ${{ inputs.image_source_directory }} && docker build $BUILD_ARGS -f ${{ inputs.dockerfile }} -t ${{ inputs.image_tag_1 }} .)
        fi
        docker push ${{ inputs.image_tag_1 }}

        if [ '${{ inputs.image_tag_2 }}' != '' ]; then
          docker tag ${{ inputs.image_tag_1 }} ${{ inputs.image_tag_2 }}
          docker push ${{ inputs.image_tag_2 }}
        fi
