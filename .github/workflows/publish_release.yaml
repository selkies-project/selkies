name: Publish release

on:
  push:
    tags:
      - "v*"

jobs:
  get_semver:
    runs-on: ubuntu-latest
    outputs:
      semver: ${{ steps.get.outputs.semver }}
    steps:
      - id: get
        env:
          RELEASE_VERSION: ${{ github.ref_name }}
        run: echo ::set-output name=semver::${RELEASE_VERSION/v/}

  # Note: When modifying this job, copy modifications to all other workflows' image jobs.
  all_component_images:
    needs: get_semver
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: coturn
            source_directory: addons/coturn

          - name: coturn-web
            source_directory: addons/coturn-web

          - name: gst-web
            source_directory: addons/gst-web

          - name: gstreamer
            version_suffix: -ubuntu18.04
            build_args: BASE_IMAGE=ubuntu:18.04;
            source_directory: addons/gstreamer

          - name: gstreamer
            version_suffix: -ubuntu20.04
            build_args: BASE_IMAGE=ubuntu:20.04;
            source_directory: addons/gstreamer

          - name: infra-gcp-installer
            source_directory: infra/gce/installer-image

          - name: py-build
            build_args: PACKAGE_VERSION=${{ needs.get_semver.outputs.semver }}
            source_directory: .

    name: ${{ matrix.name }}${{ matrix.version_suffix }} image build & publish
    steps:
      - uses: actions/checkout@v2

      - name: Build & publish ${{ matrix.name }} image
        uses: ./.github/actions/build_and_publish_image
        with:
          build_args: ${{ matrix.build_args }}
          github_personal_access_token: ${{ secrets.GITHUB_TOKEN }}
          github_username: $GITHUB_ACTOR
          image_name: ${{ matrix.name }}
          image_source_directory: ${{ matrix.source_directory }}
          image_version_1: $GITHUB_REF_NAME${{ matrix.version_suffix }}
          image_version_2: latest${{ matrix.version_suffix }}

  # Note: When modifying this job, copy modifications to all other workflows' image jobs.
  all_example_images:
    needs:
      - get_semver
      - all_component_images
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: gst-py-example
            version_suffix: -ubuntu18.04
            build_args: PACKAGE_VERSION=${{ needs.get_semver.outputs.semver }};UBUNTU_RELEASE=18.04;GSTREAMER_BASE_IMAGE_RELEASE=$GITHUB_REF_NAME;PY_BUILD_IMAGE=ghcr.io/selkies-project/selkies-gstreamer/py-build:$GITHUB_REF_NAME;WEB_IMAGE=ghcr.io/selkies-project/selkies-gstreamer/gst-web:$GITHUB_REF_NAME
            dockerfile: Dockerfile.example
            source_directory: .

          - name: gst-py-example
            build_args: PACKAGE_VERSION=${{ needs.get_semver.outputs.semver }};UBUNTU_RELEASE=20.04;GSTREAMER_BASE_IMAGE_RELEASE=$GITHUB_REF_NAME;PY_BUILD_IMAGE=ghcr.io/selkies-project/selkies-gstreamer/py-build:$GITHUB_REF_NAME;WEB_IMAGE=ghcr.io/selkies-project/selkies-gstreamer/gst-web:$GITHUB_REF_NAME
            dockerfile: Dockerfile.example
            source_directory: .

    name: ${{ matrix.name }}${{ matrix.version_suffix }} image build & publish
    steps:
      - uses: actions/checkout@v2

      - name: Build & publish ${{ matrix.name }} image
        uses: ./.github/actions/build_and_publish_image
        with:
          build_args: ${{ matrix.build_args }}
          github_personal_access_token: ${{ secrets.GITHUB_TOKEN }}
          github_username: $GITHUB_ACTOR
          image_name: ${{ matrix.name }}
          image_source_directory: ${{ matrix.source_directory }}
          image_version_1: $GITHUB_REF_NAME${{ matrix.version_suffix }}
          image_version_2: latest${{ matrix.version_suffix }}

  # TODO: Refactor asset jobs with matrix syntax.
  asset_gstreamer_ubuntu1804:
    name: Publish gstreamer-ubuntu1804 asset to GCS
    runs-on: ubuntu-latest
    needs: all_component_images
    outputs:
      path: ${{ steps.extract.outputs.path }}
      name: ${{ steps.extract.outputs.name }}
      mimetype: ${{ steps.extract.outputs.mimetype }}
    steps:
      - name: Extract and upload to GCS
        id: extract
        env:
          GCS_SA_KEY: ${{ secrets.GCP_ACTIONS_SA_KEY }}
          RELEASE_VERSION: ${{ github.ref_name }}
        run: |
          # GHCR Login
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

          # GCS Login
          cat - > /tmp/sa_key.json <<EOF
          ${{ secrets.GCP_ACTIONS_SA_KEY }}
          EOF
          gcloud -q auth activate-service-account --key-file /tmp/sa_key.json

          # Docker create
          docker create --name copy ghcr.io/selkies-project/selkies-gstreamer/gstreamer:${RELEASE_VERSION}-ubuntu18.04

          # Docker copy and create tarball
          docker cp copy:/opt/selkies-gstreamer-latest.tgz /tmp/selkies-gstreamer-${RELEASE_VERSION}-ubuntu18.04.tgz

          # Docker rm
          docker rm copy

          # Copy to GCS
          gsutil cp /tmp/selkies-gstreamer-${RELEASE_VERSION}-ubuntu18.04.tgz gs://selkies-project-releases/selkies-gstreamer/${RELEASE_VERSION}/

          echo ::set-output name=path::/tmp/selkies-gstreamer-${RELEASE_VERSION}-ubuntu18.04.tgz
          echo ::set-output name=name::selkies-gstreamer-${RELEASE_VERSION}-ubuntu18.04.tgz
          echo ::set-output name=mimetype::application/tar+gzip

      - uses: actions/cache@v2
        with:
          key: gstreamer-asset-ubuntu1804
          path: ${{ steps.extract.outputs.path }}

  asset_gstreamer_ubuntu2004:
    name: Publish gstreamer-ubuntu2004 asset to GCS
    runs-on: ubuntu-latest
    needs: all_component_images
    outputs:
      path: ${{ steps.extract.outputs.path }}
      name: ${{ steps.extract.outputs.name }}
      mimetype: ${{ steps.extract.outputs.mimetype }}
    steps:
      - name: Extract and upload to GCS
        id: extract
        env:
          GCS_SA_KEY: ${{ secrets.GCP_ACTIONS_SA_KEY }}
          RELEASE_VERSION: ${{ github.ref_name }}
        run: |
          # GHCR Login
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

          # GCS Login
          cat - > /tmp/sa_key.json <<EOF
          ${{ secrets.GCP_ACTIONS_SA_KEY }}
          EOF
          gcloud -q auth activate-service-account --key-file /tmp/sa_key.json

          # Docker create
          docker create --name copy ghcr.io/selkies-project/selkies-gstreamer/gstreamer:${RELEASE_VERSION}-ubuntu20.04

          # Docker copy and create tarball
          docker cp copy:/opt/selkies-gstreamer-latest.tgz /tmp/selkies-gstreamer-${RELEASE_VERSION}-ubuntu20.04.tgz

          # Docker rm
          docker rm copy

          # Copy to GCS
          gsutil cp /tmp/selkies-gstreamer-${RELEASE_VERSION}-ubuntu20.04.tgz gs://selkies-project-releases/selkies-gstreamer/${RELEASE_VERSION}/

          echo ::set-output name=path::/tmp/selkies-gstreamer-${RELEASE_VERSION}-ubuntu20.04.tgz
          echo ::set-output name=name::selkies-gstreamer-${RELEASE_VERSION}-ubuntu20.04.tgz
          echo ::set-output name=mimetype::application/tar+gzip

      - uses: actions/cache@v2
        with:
          key: gstreamer-asset-ubuntu2004
          path: ${{ steps.extract.outputs.path }}

  asset_gst_py:
    name: Publish gst-py asset to GCS
    runs-on: ubuntu-latest
    needs:
      - get_semver
      - all_component_images
    outputs:
      path: ${{ steps.extract.outputs.path }}
      name: ${{ steps.extract.outputs.name }}
      mimetype: ${{ steps.extract.outputs.mimetype }}
    steps:
      - name: Extract and upload to GCS
        id: extract
        env:
          GCS_SA_KEY: ${{ secrets.GCP_ACTIONS_SA_KEY }}
          PACKAGE_VERSION: ${{ needs.get_semver.outputs.semver }}
          PYPI_PACKAGE: selkies_gstreamer
          RELEASE_VERSION: ${{ github.ref_name }}
        run: |
          # TODO: Assert that all env vars are set.

          # GHCR Login
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

          # GCS Login
          cat - > /tmp/sa_key.json <<EOF
          ${{ secrets.GCP_ACTIONS_SA_KEY }}
          EOF
          gcloud -q auth activate-service-account --key-file /tmp/sa_key.json

          # Docker create
          docker create --name copy ghcr.io/selkies-project/selkies-gstreamer/py-build:${RELEASE_VERSION}

          # Docker copy and create tarball
          docker cp copy:/opt/pypi/dist/${PYPI_PACKAGE}-${PACKAGE_VERSION}-py3-none-any.whl /tmp/${PYPI_PACKAGE}-${PACKAGE_VERSION}-py3-none-any.whl

          # Docker rm
          docker rm copy

          # Copy to GCS
          gsutil cp /tmp/${PYPI_PACKAGE}-${PACKAGE_VERSION}-py3-none-any.whl gs://selkies-project-releases/selkies-gstreamer/${RELEASE_VERSION}/

          echo ::set-output name=path::/tmp/${PYPI_PACKAGE}-${PACKAGE_VERSION}-py3-none-any.whl
          echo ::set-output name=name::${PYPI_PACKAGE}-${PACKAGE_VERSION}-py3-none-any.whl
          echo ::set-output name=mimetype::application/x-pywheel+zip

      - uses: actions/cache@v2
        with:
          key: gst-py-asset
          path: ${{ steps.extract.outputs.path }}

  asset_gst_web:
    name: Publish gst-web asset to GCS
    runs-on: ubuntu-latest
    needs: all_component_images
    outputs:
      path: ${{ steps.extract.outputs.path }}
      name: ${{ steps.extract.outputs.name }}
      mimetype: ${{ steps.extract.outputs.mimetype }}
    steps:
      - name: Extract and upload to GCS
        id: extract
        env:
          GCS_SA_KEY: ${{ secrets.GCP_ACTIONS_SA_KEY }}
          RELEASE_VERSION: ${{ github.ref_name }}
        run: |
          # GHCR Login
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

          # GCS Login
          cat - > /tmp/sa_key.json <<EOF
          ${{ secrets.GCP_ACTIONS_SA_KEY }}
          EOF
          gcloud -q auth activate-service-account --key-file /tmp/sa_key.json

          # Docker create
          docker create --name copy ghcr.io/selkies-project/selkies-gstreamer/gst-web:${RELEASE_VERSION}

          # Docker copy and create tarball
          (cd /tmp && docker cp copy:/usr/share/nginx/html ./gst-web && tar zcvf /tmp/selkies-gstreamer-web-${RELEASE_VERSION}.tgz gst-web)

          # Docker rm
          docker rm copy

          # Copy to GCS
          gsutil cp /tmp/selkies-gstreamer-web-${RELEASE_VERSION}.tgz gs://selkies-project-releases/selkies-gstreamer/${RELEASE_VERSION}/

          echo ::set-output name=path::/tmp/selkies-gstreamer-web-${RELEASE_VERSION}.tgz
          echo ::set-output name=name::selkies-gstreamer-web-${RELEASE_VERSION}.tgz
          echo ::set-output name=mimetype::application/tar+gzip

      - uses: actions/cache@v2
        with:
          key: gst-web-asset
          path: ${{ steps.extract.outputs.path }}

  create_release:
    runs-on: ubuntu-latest
    needs:
      - all_component_images
      - asset_gst_py
      - asset_gst_web
      - asset_gstreamer_ubuntu1804
      - asset_gstreamer_ubuntu2004
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Cache gstreamer-ubuntu2004 asset
        uses: actions/cache@v2
        with:
          key: gstreamer-asset-ubuntu2004
          path: ${{ needs.asset_gstreamer_ubuntu2004.outputs.path }}

      - name: Cache gstreamer-ubuntu1804 asset
        uses: actions/cache@v2
        with:
          key: gstreamer-asset-ubuntu1804
          path: ${{ needs.asset_gstreamer_ubuntu1804.outputs.path }}

      - name: Cache gst-py asset
        uses: actions/cache@v2
        with:
          key: gst-py-asset
          path: ${{ needs.asset_gst_py.outputs.path }}

      - name: Cache gst-web asset
        uses: actions/cache@v2
        with:
          path: ${{ needs.asset_gst_web.outputs.path }}
          key: gst-web-asset

      - id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          prerelease: false
          release_name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}

      - name: Upload gstreamer-ubuntu2004 asset to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_content_type: ${{ needs.asset_gstreamer_ubuntu2004.outputs.mimetype }}
          asset_name: ${{ needs.asset_gstreamer_ubuntu2004.outputs.name }}
          asset_path: ${{ needs.asset_gstreamer_ubuntu2004.outputs.path }}
          upload_url: ${{ steps.create_release.outputs.upload_url }}

      - name: Upload gstreamer-ubuntu1804 asset to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_content_type: ${{ needs.asset_gstreamer_ubuntu1804.outputs.mimetype }}
          asset_name: ${{ needs.asset_gstreamer_ubuntu1804.outputs.name }}
          asset_path: ${{ needs.asset_gstreamer_ubuntu1804.outputs.path }}
          upload_url: ${{ steps.create_release.outputs.upload_url }}

      - name: Upload gst-py asset to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_content_type: ${{ needs.asset_gst_py.outputs.mimetype }}
          asset_name: ${{ needs.asset_gst_py.outputs.name }}
          asset_path: ${{ needs.asset_gst_py.outputs.path }}
          upload_url: ${{ steps.create_release.outputs.upload_url }}

      - name: Upload gst-web asset to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_content_type: ${{ needs.asset_gst_web.outputs.mimetype }}
          asset_name: ${{ needs.asset_gst_web.outputs.name }}
          asset_path: ${{ needs.asset_gst_web.outputs.path }}
          upload_url: ${{ steps.create_release.outputs.upload_url }}
